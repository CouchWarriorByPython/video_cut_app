import os
from contextlib import asynccontextmanager
from fastapi import FastAPI
from fastapi.staticfiles import StaticFiles
from fastapi.exceptions import RequestValidationError
from starlette.exceptions import HTTPException as StarletteHTTPException

from backend.api.exceptions import (
    validation_exception_handler, http_exception_handler, general_exception_handler
)
from backend.api.endpoints import video, annotation, static, auth, users
from backend.middlewares.auth_middleware import auth_middleware
from backend.middlewares.log_middleware import log_middleware
from backend.config.settings import Settings
from backend.utils.logger import get_logger
from backend.utils.admin_setup import create_super_admin

logger = get_logger(__name__, "main.log")


@asynccontextmanager
async def lifespan(_app: FastAPI):
    """Lifespan –¥–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ –¥–æ–¥–∞—Ç–∫–∞"""
    # Startup
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –¥–æ–¥–∞—Ç–∫–∞...")

    try:
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Å—É–ø–µ—Ä –∞–¥–º—ñ–Ω–∞
        create_super_admin()
        logger.info("‚úÖ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó: {str(e)}")

    yield

    logger.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏ –¥–æ–¥–∞—Ç–∫–∞")


app = FastAPI(
    title="Video Annotation API",
    description="API –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è, –∞–Ω–æ—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ –æ–±—Ä–æ–±–∫–∏ –≤—ñ–¥–µ–æ –∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—î—é",
    version="1.0.0",
    lifespan=lifespan
)

# –î–æ–¥–∞—î–º–æ –º—ñ–¥–ª–≤–µ–π—Ä–∏ (–ø–æ—Ä—è–¥–æ–∫ –≤–∞–∂–ª–∏–≤–∏–π!)
app.middleware("http")(log_middleware)
app.middleware("http")(auth_middleware)

# –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–º–∏–ª–æ–∫
app.add_exception_handler(RequestValidationError, validation_exception_handler)
app.add_exception_handler(StarletteHTTPException, http_exception_handler)
app.add_exception_handler(Exception, general_exception_handler)

# –ú–æ–Ω—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—á–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤
if os.path.exists("frontend/static"):
    app.mount("/static", StaticFiles(directory="frontend/static"), name="static")
    logger.info("–°—Ç–∞—Ç–∏—á–Ω—ñ —Ñ–∞–π–ª–∏ –∑–º–æ–Ω—Ç–æ–≤–∞–Ω–æ –∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó 'frontend/static'")
elif os.path.exists("frontend"):
    app.mount("/static", StaticFiles(directory="frontend"), name="static")
    logger.info("–°—Ç–∞—Ç–∏—á–Ω—ñ —Ñ–∞–π–ª–∏ –∑–º–æ–Ω—Ç–æ–≤–∞–Ω–æ –∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó 'frontend'")
else:
    logger.warning("–î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è 'frontend' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")

# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —Ä–æ—É—Ç–µ—Ä—ñ–≤
app.include_router(auth.router)
app.include_router(users.router)
app.include_router(video.router)
app.include_router(annotation.router)
app.include_router(static.router)


@app.get("/health")
async def health_check():
    return {"status": "healthy", "service": "video-annotation-api"}


if __name__ == "__main__":
    import uvicorn

    logger.info(f"MongoDB URI: {Settings.mongo_uri}")
    logger.info(f"–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ {Settings.fast_api_host}:{Settings.fast_api_port}")

    uvicorn.run(
        "backend.main:app",
        host=Settings.fast_api_host,
        port=Settings.fast_api_port,
        reload=Settings.reload,
        log_level="info"
    )