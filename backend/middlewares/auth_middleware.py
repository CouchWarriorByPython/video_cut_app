from fastapi import Request
from fastapi.responses import JSONResponse
from backend.services.auth_service import AuthService
from backend.utils.logger import get_logger

logger = get_logger(__name__, "middleware.log")

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –¥–æ—Å—Ç—É–ø—É –¥–æ –µ–Ω–¥–ø–æ—ñ–Ω—Ç—ñ–≤
ENDPOINT_PERMISSIONS = {
    # –ü—É–±–ª—ñ—á–Ω—ñ –µ–Ω–¥–ø–æ—ñ–Ω—Ç–∏
    "/auth/login": None,
    "/auth/refresh": None,
    "/login": None,
    "/docs": None,
    "/openapi.json": None,
    "/health": None,
    "/favicon.ico": None,
    "/favicon.png": None,
    "/get_video": None,

    # HTML —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    "/": ["admin", "super_admin"],  # –¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω–∏ –º–æ–∂—É—Ç—å –∑–∞–≤–∞–Ω—Ç–∞–∂—É–≤–∞—Ç–∏ –≤—ñ–¥–µ–æ
    "/annotator": ["annotator", "admin", "super_admin"],
    "/faq": ["annotator", "admin", "super_admin"],

    # API –µ–Ω–¥–ø–æ—ñ–Ω—Ç–∏ –∑ —Ä–æ–ª—è–º–∏
    "/upload": ["admin", "super_admin"],  # –¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω–∏ –º–æ–∂—É—Ç—å –∑–∞–≤–∞–Ω—Ç–∞–∂—É–≤–∞—Ç–∏
    "/task_status": ["admin", "super_admin"],  # –¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω–∏ –º–æ–∂—É—Ç—å –ø–µ—Ä–µ–≤—ñ—Ä—è—Ç–∏ —Å—Ç–∞—Ç—É—Å
    "/video_status": ["annotator", "admin", "super_admin"],
    "/get_videos": ["annotator", "admin", "super_admin"],
    "/get_annotation": ["annotator", "admin", "super_admin"],
    "/save_fragments": ["annotator", "admin", "super_admin"],

    # Admin panel
    "/admin": "html",
    "/admin/": "html",
    "/admin/stats": ["admin", "super_admin"],
    "/admin/users": ["admin", "super_admin"],
    "/admin/cvat-settings": ["admin", "super_admin"],
}


async def auth_middleware(request: Request, call_next):
    """–¶–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –º—ñ–¥–ª–≤–µ–π—Ä –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó"""

    request_path = request.url.path
    method = request.method

    # –°—Ç–∞—Ç–∏—á–Ω—ñ —Ñ–∞–π–ª–∏ –∑–∞–≤–∂–¥–∏ –¥–æ–∑–≤–æ–ª–µ–Ω—ñ
    if (request_path.startswith("/static") or
            request_path.startswith("/css") or
            request_path.startswith("/js")):
        return await call_next(request)

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø—É
    required_permission = get_endpoint_permission(request_path, method)

    # –ü—É–±–ª—ñ—á–Ω—ñ –µ–Ω–¥–ø–æ—ñ–Ω—Ç–∏
    if required_permission is None:
        return await call_next(request)

    # HTML —Å—Ç–æ—Ä—ñ–Ω–∫–∏ - –¥–æ–∑–≤–æ–ª—è—î–º–æ –ø–æ–∫–∞–∑, JS —Å–∞–º –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç—å
    if required_permission == "html":
        is_html_request = request.headers.get("accept", "").startswith("text/html")
        if is_html_request:
            return await call_next(request)
        # –Ø–∫—â–æ —Ü–µ –Ω–µ HTML –∑–∞–ø–∏—Ç –Ω–∞ HTML –µ–Ω–¥–ø–æ—ñ–Ω—Ç - —Ç—Ä–µ–±–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è
        required_permission = ["annotator", "admin", "super_admin"]

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–æ–∫–µ–Ω
    auth_header = request.headers.get("Authorization")
    if not auth_header:
        logger.warning(f"–í—ñ–¥—Å—É—Ç–Ω—ñ–π Authorization header –¥–ª—è {method} {request.url}")
        return JSONResponse(
            status_code=401,
            content={"success": False, "message": "Authorization header –≤—ñ–¥—Å—É—Ç–Ω—ñ–π"}
        )

    try:
        scheme, token = auth_header.split(" ", 1)
        if scheme.lower() != "bearer":
            return JSONResponse(
                status_code=401,
                content={"success": False, "message": "–ù–µ–≤—ñ—Ä–Ω–∞ —Å—Ö–µ–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó"}
            )

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–æ–∫–µ–Ω
        auth_service = AuthService()
        payload = auth_service.verify_token(token)

        if not payload:
            return JSONResponse(
                status_code=401,
                content={"success": False, "message": "–ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π –∞–±–æ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏–π —Ç–æ–∫–µ–Ω"}
            )

        user_data = {
            "user_id": payload["user_id"],
            "email": payload["sub"],
            "role": payload["role"]
        }

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–æ–ª—ñ
        if isinstance(required_permission, list):
            if user_data["role"] not in required_permission:
                logger.warning(
                    f"üö´ –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ –¥–ª—è {user_data['email']} "
                    f"(—Ä–æ–ª—å: {user_data['role']}, –ø–æ—Ç—Ä—ñ–±–Ω–∞: {required_permission})"
                )
                return JSONResponse(
                    status_code=403,
                    content={"success": False, "message": "–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É"}
                )

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        request.state.user = user_data
        logger.debug(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞: {payload['sub']} ({payload['role']})")

    except ValueError:
        return JSONResponse(
            status_code=401,
            content={"success": False, "message": "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞"}
        )
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ auth_middleware: {str(e)}")
        return JSONResponse(
            status_code=500,
            content={"success": False, "message": "–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"}
        )

    return await call_next(request)


def get_endpoint_permission(path: str, method: str) -> str | list[str] | None:
    """–û—Ç—Ä–∏–º—É—î –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø—É –¥–ª—è –µ–Ω–¥–ø–æ—ñ–Ω—Ç–∞"""

    # –¢–æ—á–Ω–∏–π –∑–±—ñ–≥
    if path in ENDPOINT_PERMISSIONS:
        return ENDPOINT_PERMISSIONS[path]

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∏
    if path.startswith("/task_status/"):
        return ENDPOINT_PERMISSIONS["/task_status"]

    # –í—Å—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏ —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤
    if path.startswith("/users/"):
        return ENDPOINT_PERMISSIONS["/users"]

    # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –≤–∏–º–∞–≥–∞—î–º–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é
    return ["annotator", "admin", "super_admin"]